# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'addW.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget
from datetime import datetime

class Ui_addW(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)  # 初始化UI组件

    def setupUi(self, addW):
        addW.setObjectName("addW")  # 设置窗口对象名称
        addW.resize(251, 251)  # 设置窗口大小
        self.verticalLayoutWidget = QtWidgets.QWidget(addW)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 251, 251))  # 设置垂直布局部件的位置和大小
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(10, 10, 10, 10)  # 设置布局的边距
        self.verticalLayout.setObjectName("verticalLayout")
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(13)  # 设置字体大小
        font.setBold(True)  # 设置字体为粗体
        font.setWeight(75)
        self.dateTimeEdit.setFont(font)
        self.dateTimeEdit.setAlignment(QtCore.Qt.AlignCenter)  # 设置日期时间编辑框的文本对齐方式为居中
        now = datetime.now()
        # 设置日期时间编辑框的当前日期和时间
        self.dateTimeEdit.setDateTime(QtCore.QDateTime(QtCore.QDate(now.year, now.month, now.day), QtCore.QTime(now.hour, now.minute, now.second)))
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.verticalLayout.addWidget(self.dateTimeEdit)  # 将日期时间编辑框添加到垂直布局中
        self.textEdit = QtWidgets.QTextEdit(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)  # 设置文本编辑框的字体大小
        self.textEdit.setFont(font)
        self.textEdit.setObjectName("textEdit")
        self.verticalLayout.addWidget(self.textEdit)  # 将文本编辑框添加到垂直布局中
        self.save = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.save.setObjectName("save")  # 设置保存按钮的对象名称
        self.verticalLayout.addWidget(self.save)  # 将保存按钮添加到垂直布局中

        self.retranslateUi(addW)  # 设置UI元素的文本内容
        self.save.clicked.connect(self.saveBM)  # 连接保存按钮的点击事件到saveBM方法
        QtCore.QMetaObject.connectSlotsByName(addW)  # 根据名称自动连接所有槽函数

    def retranslateUi(self, addW):
        _translate = QtCore.QCoreApplication.translate
        addW.setWindowTitle(_translate("addW", "添加日程"))  # 设置窗口标题为“添加日程”
        self.textEdit.setPlaceholderText(_translate("addW", "请输入日程："))  # 设置文本编辑框的占位符文本
        self.save.setText(_translate("addW", "保存"))  # 设置保存按钮的文本为“保存”

    def saveBM(self):
        from mainUI import Ui_mainUI
        self.toDo_Text = self.textEdit.toPlainText()  # 获取文本编辑框中的日程文本
        self.time_Text = self.dateTimeEdit.text()  # 获取日期时间编辑框中的时间文本
        out = str(self.time_Text) + '\t' + str(self.toDo_Text)  # 将时间和日程文本拼接成一行，中间用制表符分隔
        with open('Date.log', 'a', encoding='utf-8') as Date:
            # 检查最后一行是否已经以换行符结尾，如果没有则添加换行符后写入文件
            if out[-1] == '\n':
                Date.write(out)
            else:
                Date.write(out + '\n')
            # 文件上下文管理器会自动关闭文件，无需显式调用Date.close()
        self.close()  # 关闭当前窗口
        self.SBM = Ui_mainUI()  # 实例化主窗口的UI
        self.SBM.show()  # 显示主窗口
