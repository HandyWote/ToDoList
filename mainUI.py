# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'mainUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys

from PyQt5.QtWidgets import QApplication, QSizePolicy

# 导入自定义的Ui_addW类，用于添加日程的界面
from addW import *

# 定义日志文件路径
logPath = os.path.join(os.path.dirname(__file__), 'Date.log')

# 定义主界面类Ui_mainUI，继承自QWidget
class Ui_mainUI(QWidget):

    def __init__(self):
        super().__init__()
        # 设置主界面UI
        self.setupUi(self)
        # 初始化用于显示添加日程窗口的对象为None
        self.aw = None

    # 设置主界面的UI组件
    def setupUi(self, mainUI):
        mainUI.setObjectName("mainUI")
        mainUI.resize(251, 457)
        mainUI.setFocusPolicy(QtCore.Qt.ClickFocus)
        # 设置窗口图标
        self.setWindowIcon(QIcon('icon.ico'))
        # 创建日历控件，并设置其位置、大小及属性
        self.calendar = QtWidgets.QCalendarWidget(mainUI)
        self.calendar.setGeometry(QtCore.QRect(0, 0, 251, 197))
        self.calendar.setGridVisible(True)
        self.calendar.setHorizontalHeaderFormat(QtWidgets.QCalendarWidget.ShortDayNames)
        self.calendar.setVerticalHeaderFormat(QtWidgets.QCalendarWidget.NoVerticalHeader)
        self.calendar.setNavigationBarVisible(True)
        self.calendar.setDateEditEnabled(True)
        self.calendar.setObjectName("calendar")
        # 设置日历控件默认选中当前日期
        now_Date = datetime.now().date()
        self.calendar.setSelectedDate(now_Date)

        # 创建一个QGroupBox用于显示日程信息，并设置其布局
        self.date = QtWidgets.QGroupBox(mainUI)
        self.date.setGeometry(QtCore.QRect(10, 200, 231, 171))
        self.date.setFlat(True)
        self.date.setCheckable(False)
        self.date.setObjectName("date")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.date)
        self.verticalLayout.setContentsMargins(10, 10, 10, 10)
        self.verticalLayout.setObjectName("verticalLayout")
        # 调用方法生成日程对应的复选框
        self.productCheckBox()

        # 创建添加日程的按钮，并设置其位置、大小及对象名称
        self.addToDo = QtWidgets.QPushButton(mainUI)
        self.addToDo.setGeometry(QtCore.QRect(10, 400, 231, 21))
        self.addToDo.setObjectName("addToDo")
        # 创建一个QLabel用于显示作者信息，并设置其位置、对齐方式及对象名称
        self.label = QtWidgets.QLabel(mainUI)
        self.label.setGeometry(QtCore.QRect(10, 440, 231, 20))
        self.label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label.setObjectName("label")

        # 设置UI组件的文本内容
        self.retranslateUi(mainUI)
        # 将添加日程按钮的点击事件连接到toAddW方法
        self.addToDo.clicked.connect(self.toAddW)
        # 连接所有信号和槽
        QtCore.QMetaObject.connectSlotsByName(mainUI)

    # 设置UI组件的文本内容
    def retranslateUi(self, mainUI):
        _translate = QtCore.QCoreApplication.translate
        mainUI.setWindowTitle(_translate("mainUI", "ToDoList"))
        self.date.setTitle(_translate("mainUI", "日程："))
        self.addToDo.setText(_translate("mainUI", "添加日程"))
        self.label.setText(_translate("mainUI", "<a href=\'https://github.com/HandyWote/ToDoList\'>作者:HandyWote</a>"))

    # 显示添加日程的窗口
    def toAddW(self):
        self.aw = Ui_addW()  # 创建添加日程窗口的实例
        # 连接自定义信号到refreshCheckboxes方法
        self.aw.signal.connect(self.refreshCheckboxes)
        self.aw.show()  # 显示添加日程窗口

    # 刷新日程对应的复选框
    def refreshCheckboxes(self):
        # 清空旧复选框并重新加载
        while self.verticalLayout.count():
            item = self.verticalLayout.takeAt(0)  # 取出布局中的第一个项目
            widget = item.widget()  # 获取该项目对应的Widget
            if widget:
                widget.deleteLater()  # 删除Widget以释放资源
        self.productCheckBox()  # 重新生成日程对应的复选框

    # 根据日志文件内容创建复选框
    def productCheckBox(self):
        try:
            # 以只读模式打开日志文件Date.log
            with open(logPath, 'r', encoding='utf-8') as f:
                # 为每一行（即每一个日程）创建一个复选框，并将其添加到垂直布局中
                for toDo in f:
                    toDo = toDo.strip()
                    if toDo and toDo[0] != 'Y':
                        checkbox = QtWidgets.QCheckBox(f"{toDo}")
                        self.verticalLayout.addWidget(checkbox)
                        # 连接复选框的状态改变事件到checkboxStatusChanged方法
                        checkbox.stateChanged.connect(self.checkboxStatusChanged)
                        self.verticalLayout.addStretch()
        except FileNotFoundError:
            QtWidgets.QMessageBox.warning(self, "错误", "日志文件不存在！")

    # 删除指定的日程复选框，并更新日志文件
    def deleteCheckBox(self, index):
        toDoes = []
        try:
            # 读取日志文件Date.log的内容
            with open(logPath, 'r', encoding='utf-8') as f:
                for toDo in f:
                    if toDo:
                        toDo = toDo.strip()
                    toDoes.append(toDo)
            # 以写入模式打开日志文件Date.log，更新内容
            with open(logPath, 'w', encoding='utf-8') as f:
                i = 0
                for toDo in toDoes:
                    if toDo[0] == 'Y':
                        f.write(f"{toDo}\n")
                    else:
                        if i != index:
                            f.write(f"{toDo}\n")
                        else:
                            f.write(f"Y {toDo}\n")
                        i += 1
        except FileNotFoundError:
            QtWidgets.QMessageBox.warning(self, "错误", "日志文件不存在！")

    # 复选框状态改变时调用的方法
    def checkboxStatusChanged(self):
        checkbox = self.sender()
        if checkbox:
            # 获取复选框在垂直布局中的索引
            index = self.verticalLayout.indexOf(checkbox)
            # 根据索引删除对应日程，并更新日志文件
            self.deleteCheckBox(index)

# 程序入口
if __name__ == '__main__':
    try:
        # 确保Date.log文件存在
        with open(logPath, 'a', encoding='utf-8') as f:
            f.write('')
    except FileExistsError:
        QtWidgets.QMessageBox.warning(None, "错误", "日志文件生成失败！")
    # 创建QApplication实例
    app = QApplication(sys.argv)
    # 创建主界面实例
    Dlg = Ui_mainUI()
    Dlg.show()
    # 进入应用程序的主循环
    sys.exit(app.exec_())
